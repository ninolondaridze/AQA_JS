{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2024-05-29T08:24:46.486Z",
    "end": "2024-05-29T08:24:46.509Z",
    "duration": 23,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d2d88669-b2f4-44ee-9bb5-6beb699b5707",
      "title": "",
      "fullFile": "C:\\Users\\Nino_Londaridze\\Desktop\\Automated_testing_Js\\homeworks-automated-testing-with-js\\test\\numbers-validator\\isNumberEven.spec.js",
      "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ac0a7e32-40de-4c20-b55e-52860fe088d3",
          "title": "isNumberEven test",
          "fullFile": "C:\\Users\\Nino_Londaridze\\Desktop\\Automated_testing_Js\\homeworks-automated-testing-with-js\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven test\"",
              "fullTitle": "isNumberEven test \"before each\" hook in \"isNumberEven test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "9150e618-5a02-460e-95c0-0662233b136d",
              "parentUUID": "ac0a7e32-40de-4c20-b55e-52860fe088d3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven test\"",
              "fullTitle": "isNumberEven test \"after each\" hook in \"isNumberEven test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "d247e224-15a0-43d3-a9b3-310e8bfba35d",
              "parentUUID": "ac0a7e32-40de-4c20-b55e-52860fe088d3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "isNumberEven test should return true when provided with an even number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "d39bffeb-c3ae-4383-8d9e-6e2ce58fa07d",
              "parentUUID": "ac0a7e32-40de-4c20-b55e-52860fe088d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with an odd number",
              "fullTitle": "isNumberEven test should return false when provided with an odd number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(5);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "1636a6b8-46c8-4dbe-a211-c8ab499a9e98",
              "parentUUID": "ac0a7e32-40de-4c20-b55e-52860fe088d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isNumberEven test should throw an error when provided a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw('[4] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "4a16e729-4497-4f72-b60e-a66e01a206e0",
              "parentUUID": "ac0a7e32-40de-4c20-b55e-52860fe088d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an array of even numbers",
              "fullTitle": "isNumberEven test should return an array of even numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [5, 2, 6, 11, 22];\nconst evenNumbersArray = validator.getEvenNumbersFromArray(arrayOfNumbers);\nexpect(evenNumbersArray).to.be.eql([2, 6, 22]);",
              "err": {},
              "uuid": "720255d8-25c3-4550-9579-ac6b9afb1152",
              "parentUUID": "ac0a7e32-40de-4c20-b55e-52860fe088d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error if array is not full of numbers",
              "fullTitle": "isNumberEven test should return an error if array is not full of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arraOfValues = [5, '2', 11, 22];\nexpect(() => \n  validator.getEvenNumbersFromArray(arraOfValues)\n).to.throw('[5,2,11,22] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "76035737-f020-4544-a97d-23dc0de1e209",
              "parentUUID": "ac0a7e32-40de-4c20-b55e-52860fe088d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error if passed value is not integer",
              "fullTitle": "isNumberEven test should return an error if passed value is not integer",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => \n  validator.isInteger('4')\n).to.throw('[4] is not a number');",
              "err": {},
              "uuid": "ee09d33c-7656-419c-bc4c-f899cbcb272f",
              "parentUUID": "ac0a7e32-40de-4c20-b55e-52860fe088d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return truen if passed value is an integer",
              "fullTitle": "isNumberEven test should return truen if passed value is an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(3);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "97cbcaa6-8a87-4a8c-b164-6424ef87e860",
              "parentUUID": "ac0a7e32-40de-4c20-b55e-52860fe088d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error if array is not full of numbers",
              "fullTitle": "isNumberEven test should return an error if array is not full of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arraOfValues = [1, 2, '3'];\nexpect(validator.isAllNumbers(arraOfValues)).to.be.equal(false);",
              "err": {},
              "uuid": "9d91b474-a3a6-465c-9e9e-2bf97433e0df",
              "parentUUID": "ac0a7e32-40de-4c20-b55e-52860fe088d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error if array is not full of numbers",
              "fullTitle": "isNumberEven test should return an error if array is not full of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => validator.isAllNumbers('3')).to.throw(`[3] is not an array`)",
              "err": {},
              "uuid": "7750d915-6385-4c43-9ad3-b792a53ef8d8",
              "parentUUID": "ac0a7e32-40de-4c20-b55e-52860fe088d3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d39bffeb-c3ae-4383-8d9e-6e2ce58fa07d",
            "1636a6b8-46c8-4dbe-a211-c8ab499a9e98",
            "4a16e729-4497-4f72-b60e-a66e01a206e0",
            "720255d8-25c3-4550-9579-ac6b9afb1152",
            "76035737-f020-4544-a97d-23dc0de1e209",
            "ee09d33c-7656-419c-bc4c-f899cbcb272f",
            "97cbcaa6-8a87-4a8c-b164-6424ef87e860",
            "9d91b474-a3a6-465c-9e9e-2bf97433e0df",
            "7750d915-6385-4c43-9ad3-b792a53ef8d8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}