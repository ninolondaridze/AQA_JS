{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 6,
    "pending": 0,
    "failures": 2,
    "start": "2024-03-12T14:58:03.393Z",
    "end": "2024-03-12T14:58:03.413Z",
    "duration": 20,
    "testsRegistered": 8,
    "passPercent": 75,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e63b4fe0-48f6-494e-b0c9-9113daf91f71",
      "title": "",
      "fullFile": "C:\\Users\\Nino_Londaridze\\Desktop\\my-homeworks\\homeworks-automated-testing-with-js\\test\\numbers-validator\\isNumberEven.spec.js",
      "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "71a8e844-b15c-472d-b424-2cc939e21b61",
          "title": "isNumberEven positive test",
          "fullFile": "C:\\Users\\Nino_Londaridze\\Desktop\\my-homeworks\\homeworks-automated-testing-with-js\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive test\"",
              "fullTitle": "isNumberEven positive test \"before each\" hook in \"isNumberEven positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "818e803a-de87-44f0-9425-039cf0ff682a",
              "parentUUID": "71a8e844-b15c-472d-b424-2cc939e21b61",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive test\"",
              "fullTitle": "isNumberEven positive test \"after each\" hook in \"isNumberEven positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "9377b7b0-c5de-4d2a-a18e-f0b0d5e3bbfa",
              "parentUUID": "71a8e844-b15c-472d-b424-2cc939e21b61",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "isNumberEven positive test should return true when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "4df4fbc2-9d81-4cb5-a525-a358bc1f4165",
              "parentUUID": "71a8e844-b15c-472d-b424-2cc939e21b61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with an odd number",
              "fullTitle": "isNumberEven positive test should return false when provided with an odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(5);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "b9e245b2-2e97-4d7b-ab02-0d3cb3e44113",
              "parentUUID": "71a8e844-b15c-472d-b424-2cc939e21b61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isNumberEven positive test should throw an error when provided a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw('[4] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "047d67ef-6714-487e-a8d2-19fb5ce38df4",
              "parentUUID": "71a8e844-b15c-472d-b424-2cc939e21b61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an array of even numbers",
              "fullTitle": "isNumberEven positive test should return an array of even numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [5, 2, 6, 11, 22];\nconst evenNumbersArray = validator.getEvenNumbersFromArray(arrayOfNumbers);\nexpect(evenNumbersArray).to.be.eql([2, 6, 22]);",
              "err": {},
              "uuid": "a960ebb9-3fbd-4f0b-a1e8-c950b15793b4",
              "parentUUID": "71a8e844-b15c-472d-b424-2cc939e21b61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error if array is not full of numbers",
              "fullTitle": "isNumberEven positive test should return an error if array is not full of numbers",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const arraOfValues = [5, '2', 11, 22];\nexpect(() => {\n  validator.getEvenN4umbersFromArray(arraOfValues);\n}).to.throw('[5,2,11,22] is not an array of \"Numbers\"');",
              "err": {
                "message": "AssertionError: expected [Function] to throw error including '[5,2,11,22] is not an array of \"Numbe…' but got 'validator.getEvenN4umbersFromArray is…'",
                "estack": "AssertionError: expected [Function] to throw error including '[5,2,11,22] is not an array of \"Numbe…' but got 'validator.getEvenN4umbersFromArray is…'\n    at Context.<anonymous> (file:///C:/Users/Nino_Londaridze/Desktop/my-homeworks/homeworks-automated-testing-with-js/test/numbers-validator/isNumberEven.spec.js:39:16)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": "- validator.getEvenN4umbersFromArray is not a function\n+ [5,2,11,22] is not an array of \"Numbers\"\n"
              },
              "uuid": "41280fc1-b507-4ea9-b11e-22b0565caf19",
              "parentUUID": "71a8e844-b15c-472d-b424-2cc939e21b61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error if passed value is not integer",
              "fullTitle": "isNumberEven positive test should return an error if passed value is not integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger('4');\n}).to.throw('[4] is not a number');",
              "err": {},
              "uuid": "46a34f71-52cf-406b-bbf8-530c9c635bdd",
              "parentUUID": "71a8e844-b15c-472d-b424-2cc939e21b61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return truen if passed value is an integer",
              "fullTitle": "isNumberEven positive test should return truen if passed value is an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(3);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "7306f9ee-d4c6-4ed3-89c1-a5db1a03200e",
              "parentUUID": "71a8e844-b15c-472d-b424-2cc939e21b61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error if array is not full of numbers",
              "fullTitle": "isNumberEven positive test should return an error if array is not full of numbers",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const arraOfValues = [1, 2, '3'];\nexpect(() => {\n  validator.isAllNumbers(arraOfValues);\n}).to.throw('[1, 2, 3] is not an array');",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.<anonymous> (file:///C:/Users/Nino_Londaridze/Desktop/my-homeworks/homeworks-automated-testing-with-js/test/numbers-validator/isNumberEven.spec.js:57:16)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": null
              },
              "uuid": "a230debb-f226-4360-bc73-d832453d2b4e",
              "parentUUID": "71a8e844-b15c-472d-b424-2cc939e21b61",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4df4fbc2-9d81-4cb5-a525-a358bc1f4165",
            "b9e245b2-2e97-4d7b-ab02-0d3cb3e44113",
            "047d67ef-6714-487e-a8d2-19fb5ce38df4",
            "a960ebb9-3fbd-4f0b-a1e8-c950b15793b4",
            "46a34f71-52cf-406b-bbf8-530c9c635bdd",
            "7306f9ee-d4c6-4ed3-89c1-a5db1a03200e"
          ],
          "failures": [
            "41280fc1-b507-4ea9-b11e-22b0565caf19",
            "a230debb-f226-4360-bc73-d832453d2b4e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}